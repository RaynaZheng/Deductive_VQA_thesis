formulas(assumptions).

% mereology --- part()
(all x
	(part(x,x))).

(all x all y
	((part(x,y)
	& part(y,x))
	->
	(x=y))).

(all x all y all z
	((part(x,y)
	& part(y,z))
	->
	part(x,z))).

% def: overlaps()
(all x all y
	(overlaps(x,y)
	<->
	(exists z
		(part(z,x)
		& part(z,y))))).

(all x all y
	(-part(x,y)
	->
	(exists z
		(part(z,x)
		& -overlaps(z,y))))).

% def: atom()
(all x 
	(atom(x) 
	<->  
	(all y (part(y, x) -> (y = x))))).

(all x (C(x,x))).

(all x all y (C(x,y) -> C(y,x))).

(all x all y all z
	((C(x,y)
	& part(y,z))
	->
	C(x,z))).

% def: minimal upper bound --- mub()
(all x all y all z
	(mub(x,y,z)
	<-> 
	(part(x,z) & part(y,z) & 
	-(exists u
		(part(x,u) & part(y,u) & ppart(u,z)))))).

(all x all y
        (ppart(x,y)
        <->
        (part(x,y) & (x != y)))).

% mub properties

(all x all y
	(exists z
		(mub(x,y,z)))).

(all x 
	(mub(x,x,x))).

(all x all y all z
	(mub(x,y,z) -> mub(y,x,z))).

(all x all y all z 
	(mub(x,y,z) -> part(x,z))).

(all x all y all z 
	(part(x,y) <-> mub(x,y,y))).

(all x all y all z all u 
	((mub(x,y,z) & mub(x,y,u) & part(z,u))
	->
	(z = u))).

(all x all y all z all u all w
	((mub(x,y,z) & part(x,u) & part(u,z))
	-> mub(u,y,z))).
		
% supplement axiom 9/5
% assume all graphs are connected 
% C(x,y) means 'contact'
(all x all y 
	(-C(x,y)
	-> 
	(exists z 
		(EC(x,z) & EC(z,y))))).

% definition of EC(x,y)
(all x all y
	(EC(x,y)
	<->
	(C(x,y) & -overlaps(x,y)))).

% def: path()
(all x 
	(path(x)
	<-> 
	(exists y exists z 
		(mub(y,z,x) & atom(y) & atom(z))))).

(all x all y 
	(covers(x,y)
	-> 
	(exists z 
		(atom(z) & sum(z,y,x) & -part(z,y))))).

(all x all y all z
	((atom(z) & sum(z,y,x) & -part(z,y))
	->
	covers(x,y))).

(all x exists y 
	(atom(y) & part(y,x))).

(all x all y
	(ppart(x,y)    
	->
	(exists z
		(covers(z,x) & part(z,y))))).

(all x all y
	(ppart(x,y)    
	->
	(exists z
		(covers(y,z) & part(x,z))))).

% covers def
(all x all y
        (covers(x,y)
        <->
        (ppart(y,x) & -(exists z
                (ppart(y,z) & ppart(z,x)))))).


end_of_list.
formulas(goals).

(all x all y all u 
	((atom(x) & atom(y) & (x != y))
	-> 
	(EC(x,y) | (exists z
		(EC(x,z) & EC(z,y)))))).

end_of_list.